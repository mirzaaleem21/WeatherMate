{"version":3,"sources":["components/WeatherCard.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","err","city","temperature","description","country","console","log","id","src","alt","Input","getData","onSubmit","type","placeholder","required","autocomplete","name","App","useState","weatherData","setWeatherData","e","a","target","elements","value","preventDefault","fetch","then","res","json","data","mainData","message","sys","weather","main","temp","error","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAyBeA,EAvBK,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,IAAIC,EAAwC,EAAxCA,KAAKC,EAAmC,EAAnCA,YAAYC,EAAuB,EAAvBA,YAAYC,EAAW,EAAXA,QAEnD,OADAC,QAAQC,IAAIL,GAEZ,qCACI,sBAAKM,GAAG,WAAR,UACOP,GAAO,4BAAIA,IACTC,GAAQ,4BAAIA,IACZG,GAAW,kCAAKA,QAGjB,sBAAKG,GAAG,OAAR,UACI,qBAAKA,GAAG,YAAYC,IAAI,kBAAkBC,IAAI,KAC9C,8BAAG,uBAAMF,GAAG,aAAT,cAAwBL,GAAe,8BAAIA,EAAY,sBAAMK,GAAG,YAAT,0BAA1D,UAGJ,sBAAKA,GAAG,UAAR,UACM,kCAAKJ,GAAe,4BAAIA,IAAxB,OACF,6BCjBL,SAASO,EAAT,GAA2B,IAAXC,EAAU,EAAVA,QAC3B,OACI,8BACM,uBAAMJ,GAAG,cAAcK,SAAUD,EAAjC,UACF,uBAAOE,KAAK,SACZC,YAAY,OACZP,GAAG,eACHQ,UAAQ,EACRC,aAAa,MACbC,KAAK,SAEL,uBAEJ,wBAAQV,GAAG,gBAAX,yB,MCqDOW,MA9Df,WAAgB,IAAD,EACwBC,mBAAS,IADjC,mBACJC,EADI,KACQC,EADR,iDAGX,WAAyBC,GAAzB,iBAAAC,EAAA,6DACMtB,EAAKqB,EAAEE,OAAOC,SAASxB,KAAKyB,MAElCrB,QAAQC,IAAIL,GACZqB,EAAEK,iBAJF,SAMuBC,MAAM,qDAAD,OAAsD3B,EAAtD,yDAC3B4B,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAAAG,GAAI,OAAIA,KARd,OAUsB,oBAJhBC,EANN,QAUYC,QACZb,EAAe,CACbW,KAAMC,EACNhC,KAAMgC,EAAShB,KACfb,QAAS6B,EAASE,IAAI/B,QACtBD,YAAa8B,EAASG,QAAQ,GAAGjC,YACjCD,YAAa+B,EAASI,KAAKC,KAC3BC,MAAM,KAINlB,EAAe,CACbW,KAAM,GACJ/B,KAAM,GACNG,QAAS,GACTD,YAAa,GACbD,YAAa,GACbqC,MAAM,0BA3BZ,4CAHW,sBAsCf,OACI,gCACM,qBAAKC,UAAU,UAAf,SACE,2CAGF,cAAC9B,EAAD,CAAOC,QA5CF,8CA8CP,sBAAMJ,GAAG,gBAAT,SAEE,cAAE,EAAF,CACAP,IAAKoB,EAAYmB,MAChBtC,KAAMmB,EAAYnB,KAClBC,YAAakB,EAAYlB,YACzBC,YAAaiB,EAAYjB,YACxBC,QAASgB,EAAYhB,gBC/ClBqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c9910a25.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst  WeatherCard =({err,city,temperature,description,country})=>{\r\n    console.log(city);\r\n    return (\r\n    <>\r\n        <div id=\"location\">\r\n              {err && <p>{err}</p>}\r\n                {city && <p>{city}</p>}\r\n                {country && <p> {country}</p>}\r\n                \r\n            </div>\r\n                <div id=\"temp\">\r\n                    <img id=\"temp-icon\" src=\"./icons/sun.svg\" alt=\"\"></img>\r\n                    <p><span id=\"temp-value\"> {temperature && <p>{temperature}<span id=\"temp-unit\" >&#8451;</span></p>}</span> </p>\r\n                </div>\r\n\r\n                <div id=\"climate\">\r\n                    { <p> {description && <p>{description}</p>} </p> }\r\n                    <p></p>\r\n                </div>\r\n                </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react'\r\n\r\nexport default function Input({getData}) {\r\n    return (\r\n        <div>\r\n              <form id=\"search-form\" onSubmit={getData}>\r\n            <input type=\"search\"\r\n            placeholder=\"city\"\r\n            id=\"search-input\"\r\n            required\r\n            autocomplete=\"off\"\r\n            name=\"city\"\r\n            />\r\n            <br>\r\n        </br>\r\n        <button id=\"search-button\"  >Search</button>\r\n\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState} from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport Input from './components/Input';\nimport './App.css';\n\n\nfunction App() {\n    const [weatherData,setWeatherData]=useState({});\n     \n    async function fetchData(e) {\n    const city=e.target.elements.city.value;\n    \n    console.log(city);\n    e.preventDefault()\n\n    const mainData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=3d2f4c3e045a04ae5225d66f3a134015`)\n    .then( res => res.json())\n    .then(data => data)\n\n    if(mainData.message!==\"city not found\"){\n    setWeatherData({\n      data: mainData,\n      city: mainData.name,\n      country: mainData.sys.country,\n      description: mainData.weather[0].description,\n      temperature: mainData.main.temp,\n      error:\"\"\n    }\n    )}\n    else{\n      setWeatherData({\n        data: '',\n          city: '',\n          country: '',\n          description: '',\n          temperature: '',\n          error:\"Please Type Correctly\"\n      })\n    }\n    \n   \n\n}\n\nreturn (\n    <div>\n          <div className=\"heading\">\n            <h1>Weather</h1>\n          </div>\n\n          <Input getData={fetchData} />\n\n        <main id=\"app-container\">\n\n          < WeatherCard \n          err={weatherData.error}\n           city={weatherData.city} \n           temperature={weatherData.temperature} \n           description={weatherData.description}\n            country={weatherData.country} \n            />\n        </main> \n    </div>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}